// vim: syntax=javascript
const Version: String = "Power Graph 20240425-1"
const MaxSpeed = 100;
const UnderSpeed = 120;
const Log: Boolean = false;
const LogSpeed: Boolean = false;
const Avg: Boolean = true;
const Smooth: Boolean = true;
const AutoSpeed: Boolean = true;

var display_version = "[violet]" + Version + "[white]\n";
var alert = 0.5;
var nbars = 8;
var filter = 0;
var speed = MaxSpeed;
var history_sec = 120;
var loops = 0;

if (Avg)
    nbars = 20;
else
    nbars = 6 * Vars.ipt;
if (nbars > 30) nbars = 30;

if (Avg) filter = 0.94;

var expected_bar_ticks = Math.floor(history_sec / nbars * 60);
var db = 0;
if (Smooth) db = 1;

var node;
var display: AnyBuilding = undefined;
var size;
var message: AnyBuilding = undefined;
var memory: AnyBuilding = undefined;

for (let i = Vars.links - 1; i >= 0; i--) {
    let link = getLink(i);
    let ltype = link.type;

    if (ltype == Blocks.logicDisplay) {
        print("Display found\n");
        size = 80;
        display = link;
    }
    else if (ltype == Blocks.largeLogicDisplay) {
        print("Display found\n");
        size = 176;
        display = link;
    }
    else if (ltype == Blocks.powerNode || ltype == Blocks.powerNodeLarge) {
        print("Node found\n");
        node = link;
    }
    else if (ltype == Blocks.message) {
        print(display_version);
        print("Message found\n");
        message = link;
    }
    else if (ltype == Blocks.memoryCell || ltype == Blocks.memoryBank) {
        print("Memory found\n");
        memory = link;
    }
    else
        print("Not handled: ", ltype, "\n");
}
printFlush(message);

const ech = new Memory(memory, 512);

var scale = size / 80;
var font_width;
var font_height;
var font_width_base = 8 * scale;
var font_height_base = font_width_base * 1.1;

var font_hspace = 1;
var font_skew = 0;
var font_stroke = 2 * scale;

var cur_x = 0;
var cur_y = 0;

var zero = size / 2;
var barw = 10 * scale;
var left = size - barw;

// processor sync
// sync == memory[62], when sync:3-0 changes, processors have to reset
// sync:3-0 are processors (one bit per)
// processor 0 is the master
// bit 7-4 is set to 1 by the master when the corresponding cpu can render
// each processor then are allowed to draw, then set their corresponding bit to 0
// when bit 7-4 == 0, render is finished
var sync: Number = 0;

var cpu_bit: number;    // == 1 means cpu is the master
var cpu_count: number = 1;  // number of cpus
var procs = 0;

function setup() {
    if ((ech[62] & 0xF) == 0xF) {
        print("Too many processors !");
        printFlush(message);
        endScript();
    }
    ech[62] = (ech[62] & 0xF0) | ((ech[62] & 0x0F) + 1);
    ech[62] = 0;    // reset other processor(s)
    while (!sync) {
        var links = Vars.links;
        var z = Math.rand(10);
        while (--z > 0);
        if (Vars.links != links) endScript();
    }
}

// setup();

function drawPos(x, y) {
    cur_x = x;
    cur_y = y;
}

var links = Vars.links;

var ptr = 0;
var max_power_plus = 0;
var max_power_neg = 0;
var max_capacity = 0;
var ech_width = (size - barw) / (nbars-db);
if (ech_width <= 0) ech_width = 1;

for (let i = 0; i < nbars; i++)
    ech[i] = zero;
for (let i = nbars; i < 2 * nbars; i++)
    ech[i] = 0;

var power = 0;
var hbars = 7;  // graduation
var dybars = size / (1 + hbars);
var wcap = -ech_width - 1;
var avg_pow = 0;

// Latency
var inc = 0;
var bar_ticks = Vars.tick - expected_bar_ticks;
var del_bar = 0;

while (links == Vars.links) {
    var ticks;
    if (Log) ticks = Vars.tick;

    var capacity = node.powerNetCapacity;
    var stored = node.powerNetStored;
    font_width = font_width_base;
    font_height = font_height_base;
    asm`op div _fh2 ${font_height} 2`;
    asm`op div _fw2 ${font_width} 2`;
    font_hspace = font_width / 4 + font_stroke;
    max_power_plus *= 0.9999;
    max_power_neg *= 0.9999;

    draw.clear(0, 0, 0);

    var p = node.powerNetIn - node.powerNetOut;
    power = p;
    if (Avg) {
        avg_pow = avg_pow * filter + (1 - filter) * p;
    }
    if (p > max_power_plus)
        max_power_plus = p;
    else if (p < max_power_neg)
        max_power_neg = p;

    var max_power = max_power_plus - max_power_neg;
    zero = size - size * max_power_plus / max_power;
    var power_dy = power / max_power * zero;

    // Draw graphss
    var ptr2 = ptr + nbars;
    ech[ptr] = zero + power_dy;
    ech[ptr + nbars] = size * stored / capacity;
    if (Avg)
    {
        var avg_dy = avg_pow / max_power * zero;
        ech[ptr + nbars + nbars] = zero + avg_dy;
    }
    inc += speed;
    if (inc >= MaxSpeed) {
        inc = 0;
        ptr = (ptr + 1) % nbars;
        if (AutoSpeed) {
            var ellapsed = (Vars.tick - bar_ticks);
            bar_ticks = Vars.tick;
            speed = speed * ( ellapsed / expected_bar_ticks);
            if (LogSpeed) {
                print("Loop: ", loops++, "\n");
                print("Ellapsed: ", Math.floor(ellapsed), "\n");
                print("Expected: ", expected_bar_ticks, "\n");
                print("Speed: ", Math.floor(speed * 10) / 10, "\n");
                print("Bar: ", nbars, "\n");
            }
            if (speed > UnderSpeed && (nbars > 4)) {
                nbars -= del_bar;
                del_bar = 1;
                speed = UnderSpeed;
                ech_width = (size - barw) / (nbars - db);
                if (ech_width <= 0) ech_width = 1;
                wcap = -ech_width - 1;
                expected_bar_ticks = Math.floor(history_sec / nbars * 60);
                if (LogSpeed) print("UnderSpeed, nbars=", nbars, "\n");
            }
            else
                del_bar = 0;
            if (LogSpeed) printFlush(message);
        }
    }

    var cur = size - 1 - barw;
    var last_cur = cur;
    var last_y = ech[ptr];
    var last_ay;

    if (Avg) last_ay = ech[ptr + nbars + nbars];
    draw.stroke(2);
    var ayy;
    var last_cap = -1;
    while (last_cur >= -1) {
        var m32 = (ptr2 % nbars);
        var yy = ech[m32];
        var cap = ech[nbars + m32]; // capacity
        if (Avg) ayy = ech[nbars + nbars + m32];
        draw.color(80, 80, 80);
        if (Smooth) {
            if (last_cap < cap) {
                draw.triangle({
                    x: last_cur, y: last_cap,
                    x2: cur, y2: last_cap,
                    x3: cur, y3: cap
                });
                draw.rect({
                    x: last_cur,
                    y: 0,
                    width: wcap,
                    height: last_cap
                });
            }
            else {
                draw.triangle({
                    x: last_cur, y: last_cap,
                    x2: last_cur, y2: cap,
                    x3: cur, y3: cap
                });
                draw.rect({
                    x: last_cur,
                    y: 0,
                    width: wcap,
                    height: cap
                });
            }
        }
        else {
            draw.rect({
                x: cur,
                y: 0,
                width: wcap,
                height: cap
            });
        }

        if (last_y >= zero)
            draw.color(0, 128, 0);
        else
            draw.color(128, 0, 0);

        draw.line({
            x: last_cur,
            y: last_y,
            x2: cur,
            y2: yy
        });

        if (Avg) {
            draw.color(192, 192, 0);

            draw.line({
                x: last_cur,
                y: last_ay,
                x2: cur,
                y2: ayy
            });
        }

        if (Smooth) last_cap = cap;
        last_cur = cur;
        last_y = yy;
        if (Avg) last_ay = ayy;
        ptr2 = ptr2 - 1;
        cur -= ech_width;
    }

    if (Log) {
        print("Graphs: ", Math.floor(Vars.tick - ticks), "\n");
        ticks = Vars.tick;
    }

    // Draw power bar and numeric power    
    var num;
    if (power < 0) {
        num = -power;
        draw.color(255, 0, 0);
    }
    else {
        num = power;
        draw.color(0, 255, 0);
    }
    draw.rect({ x: left, y: zero, width: barw, height: power_dy });

    if (power < 0)
        draw.color(255, 32, 32);

    // Draw numeric value of power
    var back = 2 * (font_width + font_hspace);
    cur_x = left - 10 * scale - font_width;
    cur_y = size - font_height * 1.8;
    var dot = 0;

    if (num > 2000) {
        drawChar(75);   // display K 
        num = Math.idiv(num, 100);
        cur_x -= back;
        dot = 2;
    }
    var digit;

    do {
        if (dot == 1)
            digit = 46
        else {
            digit = (num % 10) + 48;
            num = Math.idiv(num, 10);
        }
        dot = dot - 1;
        drawChar(digit);
        cur_x -= back;
    } while (num);

    if (Log) {
        print("Num power & bar: ", Math.floor(Vars.tick - ticks), "\n");
        ticks = Vars.tick;
    }

    // Draw numeric value of capacity
    draw.color(0, 255, 255);
    font_width = Math.max(6, 1.5 * scale);
    asm`op div _fw2 ${font_width} 2`;
    font_height = 8 * scale;
    asm`op div _fh2 ${font_height} 2`;
    font_hspace = font_width / 4 + font_stroke;
    back = 2 * (font_width + font_hspace);
    cur_x = left - 10 * scale - font_width;
    cur_y = 5 * scale;
    num = stored;
    draw.stroke(scale);

    if (num > 9000000) {
        drawChar(77);   // display M 
        num = Math.idiv(num, 100000);
        cur_x -= back;
        dot = 2;
    }
    else if (num > 1000000) {
        drawChar(77);   // display M 
        num = Math.idiv(num, 10000);
        cur_x -= back;
        dot = 3;
    }
    else if (num > 2000) {
        drawChar(75);   // display K 
        cur_x -= back;
        if (num < 1000000) {
            num = Math.idiv(num, 100);
            dot = 2;
        }
        else {
            num = Math.idiv(num, 1000);
            dot = 0;
        }
    }
    else
        dot = 0;

    do {
        if (dot == 1)
            digit = 46
        else {
            digit = (num % 10) + 48;
            num = Math.idiv(num, 10);
        }
        dot = dot - 1;
        drawChar(digit);
        cur_x -= back;
    } while (num);

    if (Log) {
        print("Num capa: ", Math.floor(Vars.tick - ticks), "\n");
        ticks = Vars.tick;
    }

    // Draw white lines
    draw.color(255, 255, 255);
    draw.stroke(scale);
    var y = zero % dybars;
    while (y < size) {
        draw.line({
            x: left + 5 * scale,
            y: y,
            x2: size,
            y2: y
        });

        y += dybars;
    }
    draw.stroke(2 * scale);
    draw.line({ x: left + 2, y: zero, x2: size, y2: zero });
    draw.stroke(scale);
    draw.line({ x: left, y: 0, x2: left, y2: size });
    // draw h axis
    draw.color(255, 255, 255, 128);
    draw.line({ x: 0, y: zero, x2: left - scale, y2: zero });

    if (Log) {
        print("White lines: ", Math.floor(Vars.tick - ticks), "\n");
        ticks = Vars.tick;
        printFlush(message);
    }

    // Draw Alert if needed
    if (node.powerNetStored < node.powerNetCapacity * alert) {
        draw.color(255, 0, 0);
        const factor = 1.3;
        var s = scale * factor;
        var x2 = size / 2;
        const dx = size / 6 * factor;
        var x1 = x2 - dx;
        var x3 = x2 + dx;
        const y1 = x1;
        const y2 = x3;
        const y3 = y1;

        draw.stroke(3 * scale);
        draw.line({ x: x1, y: y1, x2: x2, y2: y2 });
        draw.line({ x: x2, y: y2, x2: x3, y2: y3 });
        draw.line({ x: x3, y: y3, x2: x1, y2: y1 });
        draw.line({ x: x2, y: y2 - s * 8, x2: x2, y2: y1 + s * 4 });
        draw.color(0, 0, 0);
        const y = y1 + s * 6;
        draw.line({ x: x2 - 0.5, y: y, x2: x2 + 0.5, y2: y });
    }

    drawFlush(display);

} // Endwhile

function drawChar(char) {
    asm`op sub _char ${char} 45`;
    asm`op add _char _char @counter`;
    asm`set @counter _char`;
    asm`jump drawChar_46 always`;
    asm`jump drawChar_47 always`;
    asm`jump drawChar_48 always`;
    asm`jump drawChar_49 always`;
    asm`jump drawChar_50 always`;
    asm`jump drawChar_51 always`;
    asm`jump drawChar_52 always`;
    asm`jump drawChar_53 always`;
    asm`jump drawChar_54 always`;
    asm`jump drawChar_55 always`;
    asm`jump drawChar_56 always`;
    asm`jump drawChar_57 always`;
    asm`jump drawChar_58 always`;
    asm`jump drawChar_59 always`;
    asm`jump drawChar_60 always`;
    asm`jump drawChar_61 always`;
    asm`jump drawChar_62 always`;
    asm`jump drawChar_63 always`;
    asm`jump drawChar_64 always`;
    asm`jump drawChar_65 always`;
    asm`jump drawChar_66 always`;
    asm`jump drawChar_67 always`;
    asm`jump drawChar_68 always`;
    asm`jump drawChar_69 always`;
    asm`jump drawChar_70 always`;
    asm`jump drawChar_71 always`;
    asm`jump drawChar_72 always`;
    asm`jump drawChar_73 always`;
    asm`jump drawChar_74 always`;
    asm`jump drawChar_75 always`;
    asm`jump drawChar_76 always`;
    asm`jump drawChar_77 always`;
    asm`drawChar_46:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op sub _draw_char_x4 _x3 1`;
    asm`draw line _x3 ${cur_y} _draw_char_x4 ${cur_y}`;
    asm`jump draw_char_advance always`;
    asm`drawChar_47:`;
    asm`drawChar_48:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} ${cur_x} _y3`;
    asm`draw line _x3 _y3 ${cur_x} ${cur_y}`;
    asm`jump draw_char_advance always`;
    asm`drawChar_49:`;
    asm`op add _x2 _fw2 ${cur_x}`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line _x3 _y3 _x2 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_50:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 _y2`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} _y2 ${cur_x} ${cur_y}`;
    asm`draw line ${cur_x} _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_51:`;
    asm`op add _x2 _fw2 ${cur_x}`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line _x2 _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_52:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} _y3 ${cur_x} _y2`;
    asm`draw line ${cur_x} _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_53:`;
    asm`op add _x2 _fw2 ${cur_x}`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} _y3 ${cur_x} _y2`;
    asm`draw line ${cur_x} _y2 _x2 _y2`;
    asm`draw line _x2 _y2 _x3 ${cur_y}`;
    asm`jump draw_char_advance always`;
    asm`drawChar_54:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y2 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} ${cur_x} _y3`;
    asm`draw line ${cur_x} _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_55:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`jump draw_char_advance always`;
    asm`drawChar_56:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} ${cur_x} _y3`;
    asm`draw line ${cur_x} _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_57:`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} _y3 _x3 _y3`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} _x3 ${cur_y}`;
    asm`draw line ${cur_x} _y3 ${cur_x} _y2`;
    asm`draw line ${cur_x} _y2 _x3 _y2`;
    asm`jump draw_char_advance always`;
    asm`drawChar_58:`;
    asm`drawChar_59:`;
    asm`drawChar_60:`;
    asm`drawChar_61:`;
    asm`drawChar_62:`;
    asm`drawChar_63:`;
    asm`drawChar_64:`;
    asm`drawChar_65:`;
    asm`drawChar_66:`;
    asm`drawChar_67:`;
    asm`drawChar_68:`;
    asm`drawChar_69:`;
    asm`drawChar_70:`;
    asm`drawChar_71:`;
    asm`drawChar_72:`;
    asm`drawChar_73:`;
    asm`drawChar_74:`;
    asm`drawChar_75:`;
    asm`op add _x2 _fw2 ${cur_x}`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line ${cur_x} ${cur_y} ${cur_x} _y3`;
    asm`draw line ${cur_x} _y2 _x2 _y2`;
    asm`draw line _x3 _y3 _x2 _y2`;
    asm`draw line _x2 _y2 _x3 ${cur_y}`;
    asm`jump draw_char_advance always`;
    asm`drawChar_76:`;
    asm`drawChar_77:`;
    asm`op add _x2 _fw2 ${cur_x}`;
    asm`op add _x3 ${cur_x} ${font_width}`;
    asm`op add _y2 _fh2 ${cur_y}`;
    asm`op add _y3 ${cur_y} ${font_height}`;
    asm`draw line _x3 _y3 _x3 ${cur_y}`;
    asm`draw line ${cur_x} ${cur_y} ${cur_x} _y3`;
    asm`draw line ${cur_x} _y3 _x2 _y2`;
    asm`draw line _x3 _y3 _x2 _y2`;
    asm`jump draw_char_advance always`;
    asm`draw_char_advance:`;
    asm`op add ${cur_x} ${cur_x} ${font_hspace}`;
    asm`op add ${cur_x} ${cur_x} ${font_width}`;
    asm`draw_chaqr_end:`;
}


